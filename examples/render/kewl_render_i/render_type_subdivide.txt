--@name 
--@shared

--@include ../../../lib/enum/all.txt

--@include ../../../lib/link/kewl_link.txt
--@include ../../../lib/permissions/kewl_permissions.txt

--@include ../../../lib/render/kewl_render_i/custom.txt
--@include ../../../lib/draw/all.txt
--@include ../../../lib/utils/arrays.txt

require("../../../lib/enum/all.txt")(true)

if SERVER then
    local kLink = require("../../../lib/link/kewl_link.txt")
    kLink.init()
    kLink.link()
end

if CLIENT then
    local kPerm = require("../../../lib/permissions/kewl_permissions.txt")
    kPerm.askPerms({
        title = "Example Script",
        permissions = {
            "render.screen",
            "render.offscreen",
            "material.create",
        },
        load = function()
            local kcRender = require("../../../lib/render/kewl_render_i/custom.txt")()
            local array = require("../../../lib/utils/arrays.txt")
            require("../../../lib/draw/all.txt")
            
            kcRender._createMaterial = function()
                local mat_rt = material.create("UnlitGeneric")
                mat_rt:setInt("$flags", MATERIAL_VAR_VERTEXCOLOR)
                return mat_rt
            end
            local WIDTH, HEIGHT = kcRender.init(4, 4)
            local DRAW_SIZE_W, DRAW_SIZE_H = kcRender.getDrawScreenSize()

            local renderPixels = kcRender.createPixelRender(OWNER and 0.3 or 0.05)
                renderPixels.loop = false
                function renderPixels:_onDraw(x, y, pixel, scrX, scrY)
                    --if x % 2 == 0 or y % 2 == 0 then return end
                    render.setColor(Color(360 / (WIDTH + HEIGHT) * (x + y), 1, 1):hsvToRGB())
                    --render.setColor(Color(360 / (HEIGHT) * (y), 1, 1):hsvToRGB())
                    local s = self.skip
                    render.drawRectFast(x, y, s, s)
                end
                function renderPixels:onFinish()
                    print("finished!")
                end
                function renderPixels:onSetup()
                    self.x = 0
                    self.y = 0
                    self.w = WIDTH
                    self.skip = math.max(DRAW_SIZE_W, DRAW_SIZE_H)
                    self.lskip = self.skip
                    
                    -- needed for progressbar
                    self.pass = 0
                    self.passes = (function()
                        local function rec(v, n)
                            if v <= 1 then return n end
                            return rec(v / 2, n + 1)
                        end
                        return rec(self.skip, 0)
                    end)()
                end
                renderPixels.getPixel = function(self)
                    return array.translate2Dto1D(self.x, self.y, self.w)
                end
                renderPixels.selectNextPixel = function(self)
                    repeat
                        self.x = self.x + self.skip
                        if self.x > self.w then
                            self.x = 0
                            self.y = self.y + self.skip
                        end
                    until self.skip == self.lskip or self.x % self.lskip ~= 0 or self.y % self.lskip ~= 0
                end
                renderPixels.finish = function(self)
                    self.lskip = self.skip
                    self.skip = self.skip / 2
                    self.x = 0
                    self.y = 0
                    self.pass = self.pass + 1 -- progressbar
                    if self.skip < 1 then
                        self:End()
                    end
                end
                
            function progressBar(Render)
                if Render._setup then return end
                if Render.finished then return end
                
                local amt = Render._pixelAmt
                local subProg = Render:getPixel() / amt
                local prog = Render.pass / Render.passes

                render.setRGBA(35, 35, 35, 255)
                local thickness = 8
                local w, h = SCREEN_SIZE_W - thickness * 2, thickness
                render.drawRectFast(
                    SCREEN_SIZE_W / 2 - w / 2, SCREEN_SIZE_H - h * 2,
                    w, h)
                render.setRGBA(25, 25, 25, 255)
                local gapX, gapY = 2, 2
                render.drawRectFast(
                    SCREEN_SIZE_W / 2 - w / 2 + gapX, SCREEN_SIZE_H - h * 2 + gapY,
                    w - gapX * 2, h - gapY * 2)
                render.setRGBA(150, 255, 50, 255)
                render.drawRectFast(
                    SCREEN_SIZE_W / 2 - w / 2 + gapX, SCREEN_SIZE_H - h * 2 + gapY,
                    (w - gapX * 2) * prog, h - gapY * 2)
                
                render.setRGBA(35, 35, 35, 255)
                render.drawRectFast(
                    SCREEN_SIZE_W / 2 - w / 2, SCREEN_SIZE_H - h * 2 - h - gapY,
                    w, h)
                render.setRGBA(25, 25, 25, 255)
                render.drawRectFast(
                    SCREEN_SIZE_W / 2 - w / 2 + gapX, SCREEN_SIZE_H - h * 2 + gapY - h - gapY,
                    w - gapX * 2, h - gapY * 2)
                render.setRGBA(255, 150, 50, 255)
                render.drawRectFast(
                    SCREEN_SIZE_W / 2 - w / 2 + gapX, SCREEN_SIZE_H - h * 2 + gapY - h - gapY,
                    (w - gapX * 2) * subProg, h - gapY * 2)
            end
            
            kcRender.preDrawScreens = function() end
            hook.add("render", "draw", function()
                kcRender.drawScreens()
                progressBar(renderPixels)
            end)
            
            kcRender.hook("renderoffscreen", "draw", function(dt, t, scrX, scrY)
                renderPixels:render({scrX, scrY})
            end)
        end,
        pending = kPerm.drawPendingFloatingKey(),
    })
end