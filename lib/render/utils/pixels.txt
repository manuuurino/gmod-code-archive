--@include ../../enum/all.txt

--@include ../../utils/sf_helper.txt
--@include ../../utils/arrays.txt

require("../../enum/all.txt")(true)

local sf_helper = require("../../utils/sf_helper.txt")
local array = require("../../utils/arrays.txt")

local pRender = {}

function pRender.createRender(quotaLimit)
    local mt = {}

    mt.quotaLimit = quotaLimit
    
    mt._setup = true
    mt.onStart = function(self) end  -- override

    mt.pause = false

    mt.loop = false
    mt.finish = false
    mt.onFinish = function(self) end -- override

    mt.onDraw = function(self, px, py, pixel) end -- override

    mt.range = {
        x1 = 0, x2 = SCREEN_SIZE_W,
        y1 = 0, y2 = SCREEN_SIZE_H,
    }
    mt.pixel = 0
    mt._pixelAmt = 0

    function mt.render(self, args)
        if self._setup then
            self._screen_width = (self.range.x2 - self.range.x1)
            self._pixelAmt = self._screen_width * (self.range.y2 - self.range.y1)
            mt:onStart()
            self._setup = false
            return
        end

        if self.finished or self.pause then return true end
        
        sf_helper.whileQuota(self.quotaLimit, function()
            if self.pixel >= self._pixelAmt then
                self.pixel = 0
                self:onFinish()
                self.finished = not self.loop
                if self.finished then return true end
            end
            
            local px, py = array.translate1Dto2D(self.pixel, self._screen_width)
            if self:onDraw(px, py, self.pixel, args) then return true end
            
            self.pixel = self.pixel + 1
        end)
    end
    
    return setmetatable(mt, {})
end

return pRender