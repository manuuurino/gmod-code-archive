-- defines
TEXTFILTER = {NONE = 0, POINT = 1, LINEAR = 2, ANISOTROPIC = 3}
SCREEN_SIZE_W, SCREEN_SIZE_H = 512, 512
RENDERTARGET_SIZE_W, RENDERTARGET_SIZE_H = 1024, 1024

return function(_SCREEN_W, _SCREEN_H, _RT_W, _RT_H, _RT_NAME_IND)
    -- locals
    local TEXTFILTER = TEXTFILTER
    local SCREEN_SIZE_W, SCREEN_SIZE_H = _SCREEN_W or SCREEN_SIZE_W, _SCREEN_H or SCREEN_SIZE_H 
    local RENDERTARGET_SIZE_W, RENDERTARGET_SIZE_H = _RT_W or RENDERTARGET_SIZE_W, _RT_H or RENDERTARGET_SIZE_H

    local math = math
    local systime = timer.systime
    local curtime = timer.curtime
    local realtime = timer.realtime

    local render = render
    local material = material

    local kcRender = {}

    -- defaults
    local RT_NAME_INDEX = _RT_NAME_IND or "kewlCanvas_"
    local RT_COPY = RT_NAME_INDEX .. "copy"

    local getTime = curtime
    local WIDTH, HEIGHT = 2048, 2048
    local FILTER_MAG, FILTER_MIN = TEXTFILTER.POINT, TEXTFILTER.ANISOTROPIC

    -- vars

    local RT_AMT_X, RT_AMT_Y
    local SCR_WIDTH, SCR_HEIGHT

    local lt, t, dt = getTime(), getTime(), 0

    -- local funcs

    local function trans1Dto2D(ind, w) return ind % w, math.floor(ind / w) end
    local function trans2Dto1D(x, y, w) return x + y * w end

    local function isPixelInScreenXY(scrX, scrY, scrW, scrH, pixel, w)
        local px, py = trans1Dto2D(pixel, w)
        px = px - scrW * scrX
        py = py - scrH * scrY
        return
            px >= 0 and px <= scrW - 1 and
            py >= 0 and py <= scrH - 1
    end

    local function isPixelInScreenID(scrID, scrW, scrH, pixel, w)
        return isPixelInScreenXY(trans1Dto2D(scrID, scrW, scrH), scrW, scrH, pixel, w)
    end

    -- returns

    function kcRender.setFilterMag(filter) FILTER_MAG = filter end
    function kcRender.setFilterMin(filter) FILTER_MIN = filter end
    function kcRender.getFilterMag(filter) return FILTER_MAG end
    function kcRender.getFilterMin(filter) return FILTER_MIN end

    function kcRender.getRTamt() return RT_AMT_X, RT_AMT_Y end
    function kcRender.getRTScreenSize() return SCR_WIDTH, SCR_HEIGHT end

    -- functions

    function kcRender.loopAllRTs(fn)
        for rtID = 0, RT_AMT_X * RT_AMT_Y - 1 do
            if fn(rtID) then break end
        end
    end

    function kcRender.niceRGBAout(r, g, b, a)
        r = r
        g = (g and b) and g or r
        b = b or r
        a = (b == nil and g or a) or 255
        return r, g, b, a
    end

    function kcRender.isQuotaSafe(limit)
        return quotaAverage() < quotaMax() * limit
    end

    -- drawing

    function kcRender.drawPixelFastRGBA(x, y, r, g, b, a)
        render.setRGBA(r, g, b, a)
        render.drawRectFast(x, y, 1, 1)
    end

    function kcRender.drawPixelRGBA(x, y, r, g, b, a)
        kcRender.drawPixelFastRGBA(x, y, kcRender.niceRGBAout(r, g, b, a))
    end

    function kcRender.drawPixel(x, y, col)
        kcRender.drawPixelFastRGBA(x, y, col.r, col.g, col.b, col.a)
    end


    function kcRender.drawDoUntil(quotaLimit, fn)
        while (not fn()) and kcRender.isQuotaSafe(quotaLimit) do end
    end

    function kcRender.drawUntil(quotaLimit, fn)
        while kcRender.isQuotaSafe(quotaLimit) and not fn() do end
    end

    -- setup fn

    function kcRender.init(width, height, filterMag, filterMin)
        WIDTH = width or WIDTH
        HEIGHT = height or HEIGHT

        FILTER_MAG = filterMag or FILTER_MAG
        FILTER_MIN = filterMin or FILTER_MIN

        RT_AMT_X, RT_AMT_Y = math.ceil(WIDTH / RENDERTARGET_SIZE_W), math.ceil(HEIGHT / RENDERTARGET_SIZE_H)

        SCR_WIDTH, SCR_HEIGHT = WIDTH / RT_AMT_X, HEIGHT / RT_AMT_Y
        
        render.createRenderTarget(RT_COPY)
                
        kcRender.rtNames = {}
        kcRender.loopAllRTs(function(rtID)
            local rtName = RT_NAME_INDEX .. rtID
            kcRender.rtNames[rtID] = rtName
            render.createRenderTarget(rtName)
        end)

        return WIDTH, HEIGHT
    end

    -- update

    function kcRender.updateTime()
        local ct = getTime()
        if t == ct then return end
        lt = t
        t = ct
        dt = t - lt
    end

    -- render

    function kcRender.useFilter()
        render.setFilterMag(FILTER_MAG)
        render.setFilterMin(FILTER_MIN)
    end

    function kcRender.drawOnRT(rtID, fn)
        local scrX, scrY = trans1Dto2D(rtID, RT_AMT_X)
        render.setFilterMag(FILTER_MAG)
        render.setFilterMin(FILTER_MIN)
        render.selectRenderTarget(kcRender.rtNames[rtID])
            local m = Matrix()
            m:translate(-Vector(SCR_WIDTH * scrX, SCR_HEIGHT * scrY))
            render.pushMatrix(m)
                fn(dt, t, scrX, scrY)
            render.popMatrix()
        render.selectRenderTarget(nil)
    end

    function kcRender.drawOnRTs(fn)
        kcRender.loopAllRTs(function(rtID)
            kcRender.drawOnRT(rtID, fn)
        end)
    end

    function kcRender.drawScreen(rtID)
        local scrX, scrY = trans1Dto2D(rtID, RT_AMT_X)
        
        local rectW, rectH = SCREEN_SIZE_W / RT_AMT_X, SCREEN_SIZE_H / RT_AMT_Y

        render.setRenderTargetTexture(kcRender.rtNames[rtID])
        render.setRGBA(255, 255, 255, 255)
        render.drawTexturedRectUV(
            -- X, Y
            rectW * scrX,
            rectH * scrY,
            -- W, H
            rectW, rectH,
            -- start UV
            0, 0,
            -- end UV
            WIDTH / RT_AMT_X / RENDERTARGET_SIZE_W,
            HEIGHT / RT_AMT_Y / RENDERTARGET_SIZE_H
        )
    end

    function kcRender.drawScreens()
        kcRender.loopAllRTs(function(rtID)
            kcRender.drawScreen(rtID)
        end)
    end

    function kcRender.setup(fn)
        return function()
            kcRender.updateTime()
            kcRender.useFilter()
            kcRender.drawOnRTs(fn)
            kcRender.drawScreens()
        end
    end

    function kcRender.pixels(quotaLimit, once, whileFn, endFn, range)
        endFn = endFn or (function() end)

        range = range or {
            x1 = 0, x2 = WIDTH - 1,
            y1 = 0, y2 = HEIGHT - 1,
        }

        local sw, ew, sh, eh = range.x1, range.x2, range.y1, range.y2

        local pixel = 0
        local pixelAmtScreen = SCR_WIDTH * SCR_HEIGHT
        local pixelAmtTotal = WIDTH * HEIGHT
        
        local finished = false

        return function(scrX, scrY)
            if finished then return true end
            
            kcRender.drawDoUntil(quotaLimit, function()
                if pixel >= pixelAmtTotal then
                    pixel = 0
                    endFn()
                    finished = once
                    if once then return true end
                end
                
                if not isPixelInScreenXY(
                    scrX, scrY, SCR_WIDTH, SCR_HEIGHT,
                    pixel, WIDTH, HEIGHT)
                        then return true end

                local px, py = trans1Dto2D(pixel, WIDTH)
                whileFn(px, py, pixel)
                
                pixel = pixel + 1
            end)
        end
    end

    return kcRender
end